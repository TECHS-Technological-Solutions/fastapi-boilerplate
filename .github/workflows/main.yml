on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - "5432:5432"
      cache:
        image: redis:alpine
        ports:
          - "6379:6379"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: psycopg2 prerequisites
        run: sudo apt update && sudo apt-get install libpq-dev

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - name: Create .env file
        run:
          cp .env.github .env

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        working-directory: ./src
        run: |
          pipenv install --deploy --dev

      - name: Run test suite
        working-directory: ./src
        run: pipenv run pytest

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - name: Create .env file
        run:
          cp .env.github .env

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        working-directory: ./src
        run: |
          pipenv install --deploy --dev

      - name: Run linter
        working-directory: ./src
        run: pipenv run prospector --profile .prospector.yaml

  coverage:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - "5432:5432"
      cache:
        image: redis:alpine
        ports:
          - "6379:6379"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - name: Create .env file
        run:
          cp .env.github .env

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        working-directory: ./src
        run: |
          pipenv install --deploy --dev

      - name: Create .env file
        run:
          cp .env.github .env

      - name: Run coverage
        working-directory: ./src
        continue-on-error: true
        run: pipenv run coverage run -m pytest

  docker:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/LowerSilesians/uncia.backend
          tags: |
            type=schedule
            type=semver,pattern={{raw}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
